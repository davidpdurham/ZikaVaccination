(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



If[$CommandLine[[2]]=="-wstp",ClusterRun=False,ClusterRun=True];


If[ClusterRun,SetDirectory["./"],SetDirectory[NotebookDirectory[]]];


Import["Zika vaccine model setup.m"]


Clear@runCalibration
runCalibration[country_,betaHV_,parameterOverride_:{},basemodelSetup_:"Default"]:=
Block[{basemodel=If[basemodelSetup=="Default",Get["basemodel"<>country<>".dat"],basemodelSetup],
startyr=0,endyr=10},
ComputeFinalTimeSeries[
Join[parameterOverride,BaseParameters[country,betaHV,0]],
Flatten[{NoVaccScen}],
country,startcondsBase[country,startyr,({1,0,0}&),({1,0,0}&),(0&),(0&)],startyr,endyr]
]


Clear@computeIncidenceByBetaHV
computeIncidenceByBetaHV[country_,betaHV_,parOverride_:{}]:=
With[{calibratedSolution=runCalibration[country,betaHV,parOverride]},
(
With[{infections=pullAllInfections[calibratedSolution]},((*Subtract out the first element of Infections - as this represents the seed infection*)
infections-First[infections])/pullAllPopulation[calibratedSolution]]
)
]


inputdir=If[ClusterRun,"./",NotebookDirectory[]];


outputdir=If[ClusterRun,"./",NotebookDirectory[]<>"/Data/Calibration 2017"];


Clear@calibrateVector
calibrateVector[country_,betaHV_,parOverride_:{}]:=
(
SetDirectory[inputdir];
(*Run the model*)
With[{calibratedSolution=runCalibration[country,betaHV,Join[parOverride,{\[Beta]mf->0.1}]]},
With[{
(*Extract the male and female infections and the total population size
infections-First[infections] is intended to remove the seed infection from the cumulative infection count, so that a transmission rate of zero returns 0 attack rate*)
maleInf=With[{infections=pullMaleInfections[calibratedSolution]},infections-First[infections]],
femaleInf=With[{infections=pullFemaleInfections[calibratedSolution]},infections-First[infections]],
pop=pullAllPopulation[calibratedSolution]
},
Association[
{
(*Return the input parameters*)
"betaHV"->betaHV,
"parOverride"->parOverride,

(*Return the cumulative fraction of population infected, max, final, and average over last half of simulation (after peak)*)
"cumlInfected"->With[{cumlInfected=(maleInf+femaleInf)/pop},Association[{"max"->Max[cumlInfected],"last"->Last[cumlInfected],"meanStabile"->Mean[cumlInfected[[-52*5;;]]]}]],

(*Return the proportion of all infections which occur among women*)
"proportionFemale"->With[{proportionFemale=femaleInf/(maleInf+femaleInf)},Association[{"max"->Max[proportionFemale],"last"->Last[proportionFemale],"meanStabile"->Mean[proportionFemale[[-52*5;;]]]}]]
}
]
]
]
)


Clear@writeIncidenceVector
writeIncidenceVector[country_,betaHV_,betaMF_,parOverride_:{}]:=(
SetDirectory[inputdir];
With[{dataToWrite=calibrateVector[country,betaHV,parOverride]},(
SetDirectory[outputdir];
Put[dataToWrite,"calibration_"<>country<>"_betaHV_"<>ToString@betaHV<>".dat"];
)];
)


Clear@runCountryRange
runCountryRange[country_,range_]:=With[{result=Table[calibrateVector[country,betaHV,{}],{betaHV,range}]},
(
SetDirectory[outputdir];
Put[result,("output"<>ToString[country]<>".dat")];
ResetDirectory[];
)]


countryRange=Association[Thread[CountryNames->Table[Range[0,1,0.1],{34}]]];


With[{country=CountryNames[[ToExpression[$CommandLine[[2]]]]]},runCountryRange[country,countryRange[country]]];


Quit[];