(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



If[$CommandLine[[2]]=="-wstp",ClusterRun=False,ClusterRun=True];


If[ClusterRun,SetDirectory["./"],SetDirectory[NotebookDirectory[]]];


Import["Zika vaccine model setup.m"]


Clear@runCalibration
runCalibration[country_,betaHV_,parameterOverride_:{}]:=
Block[{basemodel=Get["basemodel"<>country<>".dat"],
startyr=0,endyr=10},
ComputeFinalTimeSeries[
Join[parameterOverride,BaseParameters[country,betaHV]],
Flatten[{NoVaccScen}],
country,startcondsBase[country,startyr,({1,0,0}&),({1,0,0}&),(0&),(0&)],startyr,endyr]
]


Clear@computeIncidenceByBetaHV
computeIncidenceByBetaHV[country_,betaHV_,parOverride_:{}]:=
With[{calibratedSolution=runCalibration[country,betaHV,parOverride]},
(
With[{infections=pullAllInfections[calibratedSolution]},((*Subtract out the first element of Infections - as this represents the seed infection*)
infections-First[infections])/pullAllPopulation[calibratedSolution]]
)
]


inputdir=If[ClusterRun,"./",NotebookDirectory[]];


outputdir=If[ClusterRun,"./",NotebookDirectory[]<>"/Data/Calibration 2017"];


target=BetaDistribution[242,1031-242]


zikaTimeSeries=Get["zikaTimeSeries.dat"];


Clear@findMinLSE
findMinLSE[solution_]:=
MinimalBy[
Table[{lag,
Sum[((entry-Mean[entry]).(entry-Mean[entry])),
{entry,Transpose[{solution,PadRight[Join[Table[0,{lag}],zikaTimeSeries],Length[solution],Last[zikaTimeSeries]]}]}]},
{lag,0,Length[solution]-Length[zikaTimeSeries]}],Last]


Clear@computeParSet
computeParSet[betaHV_:0.1,parSet_:{}]:=
With[{solInf=pullAllInfections[runCalibration["Puerto Rico",betaHV,parSet]]},
With[{
lse=findMinLSE[solInf],
lowlse=Block[{zikaTimeSeries=zikaTimeSeries*(InverseCDF[target,0.025]/InverseCDF[target,0.5])},findMinLSE[solInf]],
highlse=Block[{zikaTimeSeries=zikaTimeSeries*(InverseCDF[target,0.975]/InverseCDF[target,0.5])},findMinLSE[solInf]]
},
Association[{
"parameters"->parSet,
"betaHV"->betaHV,
"timeSeries"->solInf,
"base"->Association[{
"lag"->lse[[1,1]],
"sse"->lse[[1,2]]}],
"lowCI"->Association[{
"lag"->lowlse[[1,1]],
"sse"->lowlse[[1,2]]}],
"highCI"->Association[{
"lag"->highlse[[1,1]],
"sse"->highlse[[1,2]]}]
}]
]
];


targetOutbreakSize=865975.47`


betaHVRange=Range[0.23,0.27,0.001];


amplRange=Range[0,19]/20;


phaseRange=Range[20]*Pi/10;


parameterRange=Flatten[
Table[{targetBeta->betaI,a->aI,b->bI},{betaI,betaHVRange},{aI,amplRange},{bI,phaseRange}],2];


nRuns=(*Ceiling@*)Length[parameterRange]/100


clusterI=If[ClusterRun,ToExpression[$CommandLine[[2]]],1]


Print[AbsoluteTiming[
iterationResults=
Table[
(*computeParSet[parset]*)computeParSet[targetBeta/.parset,{MosqBirth->365/7.8*mosquitoPopulation["Puerto Rico"]*(1-(a/.parset)*Cos[t*2*Pi+(b/.parset)])}],
{parset,parameterRange[[
Floor[(clusterI-1)*nRuns+1];;
Floor[If[ClusterRun,Min[clusterI*nRuns,Length[parameterRange]],(clusterI-1)*nRuns+1]]]]}];
]
]


Put[iterationResults,"iterationResults"<>$CommandLine[[2]]<>".dat"];


Quit[]



