(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



$HistoryLength=0;


ClearMemory:=Module[{},Unprotect[In,Out];Clear[In,Out];Protect[In,Out];ClearSystemCache[];];


If[$CommandLine[[2]]=="-wstp",ClusterRun=False,ClusterRun=True];


If[ClusterRun,SetDirectory["./"],SetDirectory[NotebookDirectory[]]];


SaveIt[varnamestring_,toapp_]:=Module[{output},output=Export[varnamestring<>ToString[toapp]<>".dat",ToString[ToExpression[varnamestring]//InputForm],"String"];
ClearMemory;
output];
SaveIt[varnamestring_]:=Module[{output},output=Export[varnamestring<>".dat",ToString[ToExpression[varnamestring]//InputForm],"String"];
ClearMemory;
output];
ReadIt[filename_]:=Module[{output},output=Switch[FileType[StringReplace[filename,".dat"->""]<>".dat"],File,ToExpression[Import[StringReplace[filename,".dat"->""]<>".dat","String"]],None,{}];
ClearMemory;
output];


Needs["HypothesisTesting`"]


UninformedPrior=1;


Clear[computeAgeProfile1yr]
computeAgeProfile1yr[country_]:={Flatten[Table[#/5,{5}]&/@(Select[Import["PopulationTablesMale.csv"],#[[3]]==country&&#[[6]]==2015&][[1,7;;27]]*1000)],Flatten[Table[#/5,{5}]&/@(Select[Import["PopulationTablesFemale.csv"],#[[3]]==country&&#[[6]]==2015&][[1,7;;27]]*1000)]}+0.01


CountryNames={"Aruba","Barbados","Belize","Bolivia","Bonaire","Brazil","Colombia","Costa Rica","Cuba","Curacao","Dominica","Dominican Republic","Ecuador","El Salvador","French Guiana","Guadeloupe","Guatemala","Guyana","Haiti","Honduras","Jamaica","Martinique","Mexico","Nicaragua","Panama","Paraguay","Puerto Rico","Saint Lucia","Saint Martin","Saint Vincent and the Grenadines","Suriname","Trinidad and Tobago","Venezuela","Virgin Islands"};


BirthData={Import["BirthRates.csv"]};


birthRateByCountry[country_]:=Select[BirthData[[1]],#[[1]]==country&][[1,3;;9]]/1000


Clear@youngerBirthRate
youngerBirthRate[country_]:=Switch[country,
"Bolivia",12.8/1000,
"Colombia",16.6/1000,
"Dominican Republic",23.3/1000,
"Haiti",(9.8+20.7)/2/1000,
"Peru",10.1/1000,
"Brazil",0.0204,
_,Mean[{12.8/1000,16.6/1000,23.3/1000,(9.8+20.7)/2/1000,10.1/1000,0.0204}]]


Clear@birthRateByCountryByAgeFunction
birthRateByCountryByAgeFunction[country_, age_]:=
birthRateByCountryByAgeFunction[country,age]=
Piecewise[{
{birthRateByCountry[country][[1]], 15 <= age <= 19},
{birthRateByCountry[country][[2]], 20 <= age <= 24},
{birthRateByCountry[country][[3]], 25 <= age <= 29},
{birthRateByCountry[country][[4]], 30 <= age <= 34},
{birthRateByCountry[country][[5]], 35 <= age <= 39},
{birthRateByCountry[country][[6]], 40 <= age <= 44},
{birthRateByCountry[country][[7]], 45 <= age <= 49},
{youngerBirthRate[country], 12 <= age <= 14},
{0,True}
}]


estimatedPRAnnualBirths=(computeAgeProfile1yr["Puerto Rico"][[2]][[12;;49]]).(birthRateByCountryByAgeFunction["Puerto Rico",#]&/@Range[12,49])


censusPRAnnualBirths=30991;


Clear@birthRateByCountryByAge
birthRateByCountryByAge[country_, age_]:=
birthRateByCountryByAge[country,age]=
If[country!="Puerto Rico",
birthRateByCountryByAgeFunction[country,age],
birthRateByCountryByAgeFunction[country,age]*censusPRAnnualBirths/estimatedPRAnnualBirths]


pregnancyModifier=3/4;


Clear@fullFertility
fullFertility[country_]:=Prepend[birthRateByCountry[country][[;;7]],youngerBirthRate[country]]


Clear[DeathProfile]
DeathProfile[country_]:=Flatten[Table[ToExpression[#[[5]]],{ToExpression[#[[4]]]}]&/@Select[(Import["DeathRates.csv"]),#[[1]]==country&]]


Clear[DeathRule]
DeathRule[country_]:=Thread[Table[\[Mu][age],{age,0,nAge-1}]->DeathProfile[country]]


Clear[\[Mu]];
\[Mu][age_]:=ToExpression["\[Mu]"<>ToString[age]]


nAge=100;


AgeClasses=Table[age,{age,0,nAge-1}];


MotherAgeLow=15;
MotherAgeHigh=49;


MotherAgeIndex=(MotherAgeLow+1);;(MotherAgeHigh+1);


Clear[sexuallyActiveValue]
sexuallyActiveValue[country_,gender_,age_]:=Switch[gender,
"male",Which[
age<=11,0,
age==12,0.044,
age==13,0.088,
age==14,0.131,
age==15,0.175,
age==16,0.246,
age==17,0.335,
age==18,0.417,
age==19,0.424,
age==20,0.269,
age==21,0.382,
age==22,0.489,
age==23,0.378,
age==24,0.409,
age==25,0.265,
age==26,0.281,
27<=age<=31,0.218,
32<=age<=36,0.163,
37<=age<=41,0.102,
42<=age,0.117],
"female",Which[
age<=11,0,
age==12,0.043,
age==13,0.086,
age==14,0.128,
age==15,0.171,
age==16,0.162,
age==17,0.254,
age==18,0.341,
age==19,0.33,
age==20,0.372,
age==21,0.345,
age==22,0.303,
age==23,0.328,
age==24,0.257,
age==25,0.174,
age==26,0.188,
27<=age<=31,0.164,
32<=age<=36,0.124,
37<=age<=41,0.112,
42<=age,0.093]]


Clear[ageGap]
ageGap[country_]:=If[MemberQ[Keys[#],country],#[country],Mean[Values[#]]]&[Association[{"Bolivia"->3.2,"Colombia"->4.5,"Dominican Republic"->5.8,"Haiti"->6.3,"Nicaragua"->5.3,"Peru"->3.9}]]


propMarriageYoungerWife=0.25;


ageGapStDev[country_]:=s/.Solve[InverseCDF[NormalDistribution[ageGap[country],s],{propMarriageYoungerWife}]==0][[1]]


Clear[mixing]
mixing[country_,age_,gender_]:=
If[age<20,
If[gender=="male",
Normalize[Table[If[ageI<11,0,Chop[PDF[NormalDistribution[age-0.391,2.43],ageI]]],{ageI,AgeClasses}],Total],
Normalize[Table[If[ageI<11,0,Chop[PDF[NormalDistribution[age+0.391,2.43],ageI]]],{ageI,AgeClasses}],Total]],
If[gender=="male",
Normalize[Table[If[ageI<11,0,Chop[PDF[NormalDistribution[age-ageGap[country],ageGapStDev[country]],ageI]]],{ageI,AgeClasses}],Total],
Normalize[Table[If[ageI<11,0,Chop[PDF[NormalDistribution[age+ageGap[country],ageGapStDev[country]],ageI]]],{ageI,AgeClasses}],Total]]]


Clear[partnerChangeRate]
partnerChangeRate[age_,gender_]:=If[gender=="male",
Which[age<=15,2.51,age==16,3.67,age==17,3.57,age==18,2.62,age==19,4.27,age==20,4.51,age==21,3.48,age==22,3.83,age==23,4.18,age==24,3.76,age==25,2.88,age==26,4.13,27<=age<=31,3.74,32<=age<=36,4.06,37<=age<=41,3.81,42<=age,3.06],
Which[age<=15,1.94,age==16,2.15,age==17,1.96,age==18,3.36,age==19,4.05,age==20,3.37,age==21,3.43,age==22,2.69,age==23,4.29,age==24,3.43,age==25,3.28,age==26,2.62,27<=age<=31,2.88,32<=age<=36,2.54,37<=age<=41,2.44,42<=age,2.15]]


mosqPrev[country_]:=country/.{
"Brazil"->0.09,(*Rodrigues 2015, Quintero*)
"Colombia"->Mean[{1.24,1.03,0.53,0.23,1,1.3}],(*Quintero, Romero-Vivas,Alcala*)
"Costa Rica"->Mean[{0.36,0.09}],(*Troyo*)
"El Salvador"->0.34(*Set to Honduras*),
"French Guiana"->0.888333(*Set to Colombia*),
"Guatemala"->0.34(*Set to Honduras*),
"Honduras"->0.34,(*Focks*)
"Martinique"->2.24 (*Set to Puerto Rico*),
"Mexico"->Mean[{0.03,0.2,2.75}],(*Quintero,Focks*)
"Panama"->0.225(*Set to Costa Rica*),
"Puerto Rico"->Mean[{1.73,2.75}],(*Focks*)
"Paraguay"->0.09(*Set to Brazil*),
"Suriname"->0.888333(*Set to Colombia*),
"Venezuela"->0.888333(*Set to Colombia*),


"Aruba"->0.65 (*Set to Trinidad; Chadee*),
"Barbados"->0.65 (*Set to Trinidad; Chadee*),
"Belize"->0.34(*Set to Honduras*),
"Bolivia"->0.09(*Set to Brazil*),
"Bonaire"->0.65 (*Set to Trinidad; Chadee*),
"Cuba"->2.24 (*Set to Puerto Rico*),
"Curacao"->0.65 (*Set to Trinidad; Chadee*),
"Dominica"->2.24 (*Set to Puerto Rico*),
"Dominican Republic"->2.24 (*Set to Puerto Rico*),
"Ecuador"->Mean[{0.37,1.42}](*Quintero*),
"Guadeloupe"->2.24 (*Set to Puerto Rico*),
"Guyana"->0.888333(*Set to Colombia*),
"Haiti"->2.24 (*Set to Puerto Rico*),
"Jamaica"->2.24 (*Set to Puerto Rico*),
"Nicaragua"->0.34(*Set to Honduras Focks*),
"Saint Lucia"->0.65 (*Set to Trinidad; Chadee*),
"Saint Martin"->0.65 (*Set to Trinidad; Chadee*),
"Saint Vincent and the Grenadines"->0.65 (*Set to Trinidad; Chadee*),
"Trinidad and Tobago"->0.65 (*Chadee*),
"Virgin Islands"->0.65 (*Set to Trinidad; Chadee*),

"French Polynesia"->Mean[{0.157,0.288}](*Set to Phillippines from Wai et al 2013*)
}


mosquitoPopulation[country_]:=Total[computeAgeProfile1yr[country],2]*mosqPrev[country]


m\[Nu][ageI_]:=ToExpression["mVaccAge"<>ToString[ageI]]
f\[Nu][ageI_]:=ToExpression["fVaccAge"<>ToString[ageI]]


NoVaccScen=Flatten[Table[{m\[Nu][ageI]->0,f\[Nu][ageI]->0},{ageI,AgeClasses}]];


Clear[AnnualVacc]
AnnualVacc[x_,malevacc_,femalevacc_,vaccagelow_,vaccagehigh_,vaccscen_]:=With[{xAsRate=-Log[1-x]},
Flatten[
Table[
{
m\[Nu][age]->If[malevacc,vaccscen[t]*xAsRate,0],
f\[Nu][age]->If[femalevacc,vaccscen[t]*xAsRate,0]
},
{age,vaccagelow,vaccagehigh}
]
]
]


eq[epi_,age_]:=ToExpression[ToString[epi]<>"A"<>ToString[age]<>"[t]"]


eqV[epi_]:=ToExpression[ToString[epi]<>"[t]"]


maleInfectedClasses={"mI","mIsex"};
maleExposedClasses={"mE"};
maleUninfectedClasses={"mS","mR","mV"};
maleEpiClasses=Join[maleInfectedClasses,maleExposedClasses,maleUninfectedClasses];
maleRecoveredClasses={"mR"};
malePopulationClasses={"mN"};
maleCounterClasses={"TotalMalesVaccinated","TotalMalesInfected","MaleInfectionsVector","MaleInfectionsSexual"};
maleAllClasses=Join[maleEpiClasses,maleCounterClasses,malePopulationClasses];

femaleInfectedClasses={"fI","fIsex"};
femaleExposedClasses={"fE"};
femaleUninfectedClasses={"fS","fR","fV"};
femaleEpiClasses=Join[femaleInfectedClasses,femaleExposedClasses,femaleUninfectedClasses];
femaleRecoveredClasses={"fR"};
femalePopulationClasses={"fN"};
femaleCounterClasses={"TotalFemalesVaccinated","TotalFemalesInfected","FemaleInfectionsVector","FemaleInfectionsSexual"};
femaleAllClasses=Join[femaleEpiClasses,femaleCounterClasses,femalePopulationClasses];

hInfectedClasses=Join[maleInfectedClasses,femaleInfectedClasses];
hExposedClasses=Join[maleExposedClasses,femaleExposedClasses];
hUninfectedClasses=Join[maleUninfectedClasses,femaleUninfectedClasses];
hEpiClasses=Join[maleEpiClasses,femaleEpiClasses];
hPopulationClasses=Join[malePopulationClasses,femalePopulationClasses];
hCounterClasses=Join[maleCounterClasses,femaleCounterClasses];

hRecoveredClasses=Join[maleRecoveredClasses,femaleRecoveredClasses];
hVaccinatedClasses={"mV","fV"};

hAllClasses=Join[maleAllClasses,femaleAllClasses];


vInfectedClasses={"vI"};
vExposedClasses={"vE"};
vUninfectedClasses={"vS","vN"};

vEpiClasses=Join[vUninfectedClasses,vExposedClasses,vInfectedClasses];

vCounterClasses={};
vAllClasses=Join[vEpiClasses,vCounterClasses];


Clear[\[Lambda]vh]
\[Lambda]vh:=c*\[Beta]vh*Sum[eqV[epi],{epi,vInfectedClasses}]/AllN[t]


Clear[\[Lambda]hv]
addlFOI=0;
\[Lambda]hv:=c*\[Beta]hv*(Sum[eq[epi,age],{epi,{"mI","fI"}},{age,AgeClasses}]+addlFOI)/AllN[t]


Clear[\[Lambda]fm]
\[Lambda]fm[country_,age_]:=0


Clear[\[Lambda]mf]
\[Lambda]mf[country_,age_]:=\[Beta]mf*sexuallyActiveValue[country,"female",age]*partnerChangeRate[age,"female"]*
(mixing[country,age,"female"].
Table[(Sum[eq[epi,ageI],{epi,{"mI","mIsex"}}]/eq["mN",ageI]),{ageI,AgeClasses}])


Clear[Births]
Births[country_,sol_]:=(Total[sol[eq["fN",#]]&/@#]&/@Partition[Range[15,49],5]).birthRateByCountry[country]


mSdot[country_,age_]:=\[Rho]*eq["mR",age]-m\[Nu][age]*eq["mS",age]-(\[Lambda]fm[country,age]+\[Lambda]vh)*eq["mS",age]-\[Mu][age]*eq["mS",age]
mEdot[country_,age_]:=(\[Lambda]fm[country,age]+\[Lambda]vh)*(eq["mS",age]+(1-\[Eta])*eq["mV",age])-\[Delta]*eq["mE",age]-\[Mu][age]*eq["mE",age]
mIdot[country_,age_]:=\[Delta]*eq["mE",age]-\[Gamma]*eq["mI",age]-\[Mu][age]*eq["mI",age]
mIsexdot[country_,age_]:=\[Gamma]*eq["mI",age]-\[Omega]*eq["mIsex",age]-\[Mu][age]*eq["mIsex",age]
mRdot[country_,age_]:=\[Omega]*eq["mIsex",age]-\[Rho]*eq["mR",age]-\[Mu][age]*eq["mR",age]
mVdot[country_,age_]:=m\[Nu][age]*eq["mS",age]-(1-\[Eta])*(\[Lambda]fm[country,age]+\[Lambda]vh)*eq["mV",age]-\[Mu][age]*eq["mV",age]
mNdot[country_,age_]:=-\[Mu][age]*eq["mN",age]

fSdot[country_,age_]:=\[Rho]*eq["fR",age]-f\[Nu][age]*eq["fS",age]-(\[Lambda]mf[country,age]+\[Lambda]vh)*eq["fS",age]-\[Mu][age]*eq["fS",age]
fEdot[country_,age_]:=(\[Lambda]mf[country,age]+\[Lambda]vh)*(eq["fS",age]+(1-\[Eta])*eq["fV",age])-\[Delta]*eq["fE",age]-\[Mu][age]*eq["fE",age]
fIdot[country_,age_]:=\[Delta]*eq["fE",age]-\[Gamma]*eq["fI",age]-\[Mu][age]*eq["fI",age]
fIsexdot[country_,age_]:=\[Gamma]*eq["fI",age]-\[Omega]*eq["fIsex",age]-\[Mu][age]*eq["fIsex",age]
fRdot[country_,age_]:=\[Omega]*eq["fIsex",age]-\[Rho]*eq["fR",age]-\[Mu][age]*eq["fR",age]
fVdot[country_,age_]:=f\[Nu][age]*eq["fS",age]-(1-\[Eta])*(\[Lambda]mf[country,age]+\[Lambda]vh)*eq["fV",age]-\[Mu][age]*eq["fV",age]
fNdot[country_,age_]:=-\[Mu][age]*eq["fN",age]

AllNdot:=-Sum[\[Mu][age]*(eq["mN",age]+eq["fN",age]),{age,AgeClasses}]

TotalMalesVaccinateddot[country_,age_]:=m\[Nu][age]*(eq["mN",age]-eq["mV",age])
TotalFemalesVaccinateddot[country_,age_]:=f\[Nu][age]*(eq["fN",age]-eq["fV",age])

TotalMalesInfecteddot[country_,age_]:=\[Delta]*eq["mE",age]
TotalFemalesInfecteddot[country_,age_]:=\[Delta]*eq["fE",age]

MaleInfectionsVectordot[country_,age_]:=\[Lambda]vh*(eq["mS",age]+(1-\[Eta])*eq["mV",age])
MaleInfectionsSexualdot[country_,age_]:=\[Lambda]fm[country,age]*(eq["mS",age]+(1-\[Eta])*eq["mV",age])

FemaleInfectionsVectordot[country_,age_]:=\[Lambda]vh*(eq["fS",age]+(1-\[Eta])*eq["fV",age])
FemaleInfectionsSexualdot[country_,age_]:=\[Lambda]mf[country,age]*(eq["fS",age]+(1-\[Eta])*eq["fV",age])


vSdot:=MosqBirth-\[Lambda]hv*eqV["vS"]-v\[Mu]*eqV["vS"]
vEdot:=\[Lambda]hv*eqV["vS"]-v\[Delta]*eqV["vE"]-v\[Mu]*eqV["vE"]
vIdot:=v\[Delta]*eqV["vE"]-v\[Mu]*eqV["vI"]
vNdot:=MosqBirth-v\[Mu]*eqV["vN"]


Clear[ExtractDiffEQ,ExtractDiffEQvec]
ExtractDiffEQ[country_,epi_,age_]:=ToExpression[(ToString[epi]<>"dot["<>country<>","<>ToString[age]<>"]")]
ExtractDiffEQvec[epi_]:=ToExpression[(ToString[epi]<>"dot")]


Clear[model]
model[country_]:=Flatten[Join[Table[(D[(eq[epi,age]),t]==ExtractDiffEQ[country,epi,age]),{epi,hAllClasses},{age,AgeClasses}],
Table[(D[(eqV[epi]),t]==ExtractDiffEQvec[epi]),{epi,vAllClasses}],
{D[AllN[t],t]==AllNdot}
]];


Clear[eqs]
eqs:=Flatten[Join[Table[eq[epi,age],{epi,hAllClasses},{age,AgeClasses}],Table[eqV[epi],{epi,vAllClasses}],{AllN[t]}]];


forceStartI=True;
startPct=0.001;


maleStartingConditionsByAge[startingprofile_,age_,tstart_,pars_,immuneprofile_:({1,0,0}&),malecumlvacc_:(0&)]:=
Thread[
Table[(eq[epi,age]/.t->tstart),{epi,maleAllClasses}]==
N[If[age=="All",Total[startingprofile],startingprofile[[age+1]]]*
Join[
(*Infected classes in order: mI,"mIsex"*)
{If[forceStartI,startPct,0],0},
(*Exposed classes in order: mE*)
{0},
(*Uninfected classes in order: mS, mR, mV*)
immuneprofile[age]-If[forceStartI,{startPct,0,0},{0,0,0}],
(*Counter classes in order: TotalMalesVaccinated*)
{malecumlvacc[age],If[forceStartI,startPct,0],If[forceStartI,startPct,0],0}(*Table[0,{Length[maleCounterClasses]}]*),
(*Population class in order: mN*)
{1}
]
]
]


femaleStartingConditionsByAge[startingprofile_,age_,tstart_,pars_,immuneprofile_:({1,0,0}&),femalecumlvacc_:(0&)]:=
Thread[
Table[(eq[epi,age]/.t->tstart),{epi,femaleAllClasses}]==
N[If[age=="All",Total[startingprofile],startingprofile[[age+1]]]*
Join[
(*Infected classes in order: fI,"fIsex"*)
{If[forceStartI,startPct,0],0},
(*Exposed classes in order: fE*)
{0},
(*Uninfected classes in order: fS, fR, fV*)
immuneprofile[age]-If[forceStartI,{startPct,0,0},{0,0,0}],
(*Counter classes in order: TotalFemalesVaccinated*)
{femalecumlvacc[age],If[forceStartI,startPct,0],If[forceStartI,startPct,0],0}(*Table[0,{Length[femaleCounterClasses]}]*),
(*Population class in order: fN*)
{1}
]
]
]


vecStartingConditions[startingprofile_,tstart_,pars_]:=Thread[Table[(eqV[epi]/.t->tstart),{epi,vAllClasses}]==Join[
startingprofile,
(*Counter classes in order: {}*)
Table[0,{Length[vCounterClasses]}]
]
]


StartingConditions[malestartingprofile_,femalestartingprofile_,vecstartingprofile_,tstart_,pars_,femaleimmuneprofile_:({1,0,0}&),maleimmuneprofile_:({1,0,0}&),femalecumlvacc_:(0&),malecumlvacc_:(0&)]:=
Flatten[Join[
Table[
{maleStartingConditionsByAge[malestartingprofile,age,tstart,pars,maleimmuneprofile,malecumlvacc],femaleStartingConditionsByAge[femalestartingprofile,age,tstart,pars,femaleimmuneprofile,femalecumlvacc]},
{age,AgeClasses}],
vecStartingConditions[vecstartingprofile,tstart,pars],
{AllN[tstart]==Total[malestartingprofile+femalestartingprofile]}
]]


AllParNames={c (*Biting rate*),
\[Beta]vh (*Mosq\[Rule]human transmission*),
\[Beta]hv (*Human\[Rule]mosq transmission*),
\[Omega],
\[Beta]fm,
\[Beta]mf,
\[Rho] (*R\[Rule]S*),
\[Eta](*Vaccine efficacy*),
\[Gamma](*I\[Rule]R*),
\[Delta](*E\[Rule]I*),
MosqBirth(*mosquito logistic birth rate*),
v\[Mu] (*Mosquito mortality rate*),
v\[Delta] (*Mosquito E\[Rule]I*)
}; 


Clear[BaseParameters]
UnitScaling=365;
BaseParameters[country_,betaHV_:0.4,betaMF_:0.1]:=With[{mostpars={
(*Assumptions / calibrated*)
(*\[Beta]vh\[Rule]0.4(*Mosq\[Rule]human transmission*),
*)
\[Beta]hv->betaHV(*3.5/9.9*)(*Human\[Rule]mosq transmission*),
\[Beta]mf->betaMF(*0.1*)(*Male\[Rule]female transmission*),
\[Rho]->0 (*R\[Rule]S*),
\[Eta]->1(*Vaccine efficacy*),

(*Literature-confirmed*)
\[Gamma]->365/5.5,(*I\[Rule]R*)
v\[Delta]->365/11,(*Mosquito E\[Rule]I*)
\[Beta]fm->0,(*Female\[Rule]male transmission*)
c->0.63*365,(*Biting rate*)
\[Omega]->365/36(*Duration of sexual infectiousness - assume 36 days - Turmel et al. Lancet 2016 *),
v\[Mu]->365/7.8(*Mosquito mortality rate*),
\[Delta]->365/5.9(*Chan and Johannson*)(*E\[Rule]I*),

(*Calibrated seasonality parameters*)
seasonalityAmplitude->7/10,
seasonalityPhase->\[Pi]/5
}},
Join[
mostpars,
(*Mosquito birth rate computed to hold at carrying capacity *)
{\[Beta]vh->1.1 betaHV,
(MosqBirth->(v\[Mu]/.mostpars)*mosquitoPopulation[country]*(1-seasonalityAmplitude*Sin[seasonalityPhase-2*\[Pi]*t])/.mostpars)
}]];


samplePositive[dist_]:=Module[{x=-1},
(
While[x<0,x=Random[dist]];
x
)]


Clear[SampledParameters]
UnitScaling=365;
Clear@SampledParameters
SampledParameters:={
(*Literature-confirmed*)
\[Gamma]->UnitScaling/samplePositive[NormalDistribution[5.5,0.77]],
v\[Delta]->UnitScaling/samplePositive[NormalDistribution[11,3.3]],
\[Omega]->UnitScaling/Random[UniformDistribution[36*{1/2,5}]](*Duration of sexual infectiousness - assume 36 days - Turmel et al. Lancet 2016 *),
\[Delta]->UnitScaling/Random[GammaDistribution[16.9625,1/2.875]](*Chan and Johannson*)(*E\[Rule]I*),

(*Estimated from Puerto Rico calibration*)
betaHV->samplePositive[NormalDistribution[0.259,0.00204]]
}


startyr=2015;
endyr=2080;


Clear[basemodel,startcondsBase,eqset];
startcondsBase[country_,tstart_:startyr,femaleimmuneprofile_:({1,0,0}&),maleimmuneprofile_:({1,0,0}&),femalecumlvacc_:(0&),malecumlvacc_:(0&)]:=Block[{humanpop=computeAgeProfile1yr[country],startyr=tstart},StartingConditions[humanpop[[1]],humanpop[[2]],(mosquitoPopulation[country]*{1,1,0,0}),startyr,{},femaleimmuneprofile,maleimmuneprofile,femalecumlvacc,malecumlvacc]];
eqset=eqs;


eqsol[epi_,age_,sol_]:=If[MemberQ[hAllClasses,epi],sol[eq[epi,age]],sol[eqV[epi]]]


Clear[BornByEpi]
BornByEpi[newyear_,newbirths_,sol_]:=Table[(eq[epi,0]/.t->newyear)==If[MemberQ[hCounterClasses,epi],eqsol[epi,0,sol]/.t->newyear,newbirths*If[MemberQ[{"fS","mS","fN","mN"},epi],1/2,0]],{epi,hAllClasses}]


Clear[StandardAging]
epistart=(0&);
vaccfemalefunc=(0&);
vaccmalefunc=(0&);
StandardAging[newyear_,sol_]:=Flatten[Table[Thread[Table[eq[epi,age]/.t->newyear,{epi,hAllClasses}]==
(Flatten[{
#[[1]]+#[[4]]*(1-vaccmalefunc[newyear,age])*epistart[newyear],(*mI*)
#[[2]],(*mIsex*)
#[[3]],(*mE*)
#[[4]]*(1-vaccmalefunc[newyear,age])*(1-epistart[newyear]),(*mS*)
#[[5]],(*mR*)
#[[6]]+#[[4]]*vaccmalefunc[newyear,age],(*mV*)
#[[7]]+#[[4]]*vaccmalefunc[newyear,age],(*totalmV*)
#[[8]]+#[[4]]*(1-vaccmalefunc[newyear,age])*epistart[newyear],(*totalmI*)
#[[9]]+#[[4]]*(1-vaccmalefunc[newyear,age])*epistart[newyear],(*New infections*)
#[[10]],(*New infections*)
#[[11]],(*mN*)

#[[12]]+#[[15]]*(1-vaccfemalefunc[newyear,age])*epistart[newyear],(*fI*)
#[[13]],(*fIsex*)
#[[14]],(*fE*)
#[[15]]*(1-vaccfemalefunc[newyear,age])*(1-epistart[newyear]),(*fS*)
#[[16]],(*fR*)
#[[17]]+#[[15]]*vaccfemalefunc[newyear,age],(*fV*)
#[[18]]+#[[15]]*vaccfemalefunc[newyear,age],(*totalfV*)
#[[19]]+#[[15]]*(1-vaccfemalefunc[newyear,age])*epistart[newyear],(*totalfI*)
#[[20]]+#[[15]]*(1-vaccfemalefunc[newyear,age])*epistart[newyear],(*New infections*)
#[[21]],(*New infections*)
#[[22]](*fN*)
}]&[(Chop[Table[If[MemberQ[hCounterClasses,epi],eqsol[epi,age,sol]/.t->newyear,eqsol[epi,age-1,sol]/.t->newyear],{epi,hAllClasses}]])])],{age,nAge-2}]]


OldestAging[newyear_,sol_]:=
Flatten[
Thread[
Table[eq[epi,nAge-1]/.t->newyear,{epi,hAllClasses}]==
Chop[Table[(If[!MemberQ[hCounterClasses,epi],eqsol[epi,nAge-2,sol],0]+eqsol[epi,nAge-1,sol])/.t->newyear,{epi,hAllClasses}]]]]


VectorNoAging[newyear_,sol_]:=Table[(eqV[epi]/.t->newyear)==(sol[eqV[epi]])/.t->newyear,{epi,vAllClasses}]


AllNsame[newyear_,sol_,newbirths_]:={AllN[newyear]==((sol[AllN[t]])/.t->newyear)+newbirths}


AgingOneYear[newyear_,sol_,pars_,country_]:=With[{newbirths=Sow[(((Births[country,sol])/.t->newyear)/.pars),"births"]},
Join[
BornByEpi[newyear,newbirths,sol],
StandardAging[newyear,sol],
OldestAging[newyear,sol],
VectorNoAging[newyear,sol],
AllNsame[newyear,sol,newbirths]
]]


Clear[ModelOneYear]
ModelOneYear[inND_,curyr_,startconds_,country_,vaccscen_]:=
Module[{allsol,curND},
(
curND=NDSolve`Reinitialize[inND,startconds][[1]];
NDSolve`Iterate[curND,curyr+1];
allsol=Sow[Association[NDSolve`ProcessSolutions[curND]],"solution"];
AgingOneYear[curyr+1,allsol,Join[DeathRule[country],BaseParameters[country],vaccscen],country]
)]


defineNDSystem[pars_,startconds_,tstart_,tend_]:=NDSolve`ProcessEquations[Flatten[{basemodel/.pars,startconds}],
eqset,{t,tstart,tend},Method->{"EquationSimplification"->"Solve"}]


Clear[ComputeFinalTimeSeries]
ComputeFinalTimeSeries[pars_,vaccscen_,country_,startconds_,startyr_,endyr_]:=Module[{NDsys=defineNDSystem[Join[DeathRule[country],pars,vaccscen],startconds,startyr,endyr][[1]],
curyr=startyr},
Reap[NestList[(ModelOneYear[NDsys,curyr++,#,country,vaccscen]&),startconds,Ceiling[endyr-startyr]],"solution"][[2,1]]]


Clear@computePulledResults
computePulledResults[results_,weekly_:False]:=If[weekly,
((*Pull results at end of simulation*)
Last[results]/.t->Length[results]
),
((*Pull results at weekly time steps*)
Flatten@Table[
With[{dataToRet=results[[yr]]},
Table[
dataToRet/.t->(yr-1+wk/52),
{wk,0,51}]
],{yr,Length[results]}]
)]


Clear@pullAllOutcome
pullAllOutcome[sol_,epiSet_:{},ageSet_:AgeClasses,weekly_:False]:=With[{results=Sum[eq[epi,age],{epi,epiSet},{age,ageSet}]/.sol},
computePulledResults[results,weekly]
]


Clear@pullAllOutcomePregnancies
pullAllOutcomePregnancies[sol_,country_,epiSet_:{},ageSet_:AgeClasses,weekly_:False]:=With[{results=Sum[eq[epi,age]*birthRateByCountryByAge[country, age],{epi,epiSet},{age,ageSet}]/.sol},
computePulledResults[results,weekly]
]


Clear@pullMaleInfections
pullMaleInfections[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"TotalMalesInfected"},ageSet,weekly]


Clear@pullFemaleInfections
pullFemaleInfections[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"TotalFemalesInfected"},ageSet,weekly]


Clear@pullAllInfections
pullAllInfections[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"TotalMalesInfected","TotalFemalesInfected"},ageSet,weekly]


Clear@pullPrenatalInfections
pullPrenatalInfections[sol_,country_,ageSet_:AgeClasses,weekly_:False]:=pregnancyModifier*pullAllOutcomePregnancies[sol,country,{"TotalFemalesInfected"},ageSet,weekly]


Clear@pullFemaleVaccines
pullFemaleVaccines[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"TotalFemalesVaccinated"},ageSet,weekly]


Clear@pullMaleVaccines
pullMaleVaccines[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"TotalMalesVaccinated"},ageSet,weekly]


Clear@pullAllVaccines
pullAllVaccines[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"TotalFemalesVaccinated","TotalMalesVaccinated"},ageSet,weekly]


Clear@pullMalePopulation
pullMalePopulation[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"mN"},ageSet,weekly]


Clear@pullFemalePopulation
pullFemalePopulation[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"fN"},ageSet,weekly]


Clear@pullAllPopulation
pullAllPopulation[sol_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcome[sol,{"mN","fN"},ageSet,weekly]


Clear@pullPregnancies
pullPregnancies[sol_,country_,ageSet_:AgeClasses,weekly_:False]:=pullAllOutcomePregnancies[sol,country,{"fN"},ageSet,weekly]


Clear[PullAll]
PullAll[sol_]:=Transpose[With[{eqset=Table[eq[epi,age],{epi,Join[hPopulationClasses,hCounterClasses,hRecoveredClasses,hVaccinatedClasses]},{age,AgeClasses}]},
Join[{(eqset/.sol[[1]])/.t->0},Table[(eqset/.sol[[yr]])/.t->yr,{yr,Length[sol]}]]]];


TimePlot[data_,ylabel_,plotlabel_]:=ListLinePlot[Transpose[{Table[yr,{yr,startyr,endyr-1}],data[[;;endyr-startyr]]}],Frame->{True,True,False,False},FrameLabel->{"Year",ylabel},PlotLabel->plotlabel,PlotRange->{Automatic,{0,All}},LabelStyle->Black,PlotStyle->Black]


TimePlot[data_,ylabel_,plotlabel_,plotrange_]:=ListLinePlot[Transpose[{Table[yr,{yr,startyr,endyr-1}],data[[;;endyr-startyr]]}],Frame->{True,True,False,False},FrameLabel->{"Year",ylabel},PlotLabel->plotlabel,PlotRange->{Automatic,plotrange},LabelStyle->Black,PlotStyle->Black]


MultiSeriesTimePlot[dataseries_,ylabel_,plotlabel_,legend_]:=ListLinePlot[Table[Transpose[{Table[yr,{yr,startyr,endyr-1}],data[[;;endyr-startyr]]}],{data,dataseries}],Frame->{True,True,False,False},FrameLabel->{"Year",ylabel},PlotLabel->plotlabel,PlotRange->{Automatic,{0,All}},LabelStyle->Black,PlotLegends->legend]


MultiSeriesTimePlotBlack[dataseries_,ylabel_,plotlabel_,legend_]:=ListLinePlot[Table[Transpose[{Table[yr,{yr,startyr,endyr-1}],data[[;;endyr-startyr]]}],{data,dataseries}],Frame->{True,True,False,False},FrameLabel->{"Year",ylabel},PlotLabel->plotlabel,PlotRange->{Automatic,{0,All}},LabelStyle->Black,PlotLegends->legend,PlotStyle->Table[{Black,Dashing[r/300]},{r,Length[dataseries]}]]


MultiSeriesTimePlotBlack[dataseries_,ylabel_,plotlabel_,legend_,range_]:=ListLinePlot[Table[Transpose[{Table[yr,{yr,startyr,endyr-1}],data[[;;endyr-startyr]]}],{data,dataseries}],Frame->{True,True,False,False},FrameLabel->{"Year",ylabel},PlotLabel->plotlabel,PlotRange->{Automatic,range},LabelStyle->Black,PlotLegends->legend,PlotStyle->Table[{Black,Dashing[r/300]},{r,Length[dataseries]}]]


CumulativeTimePlot[data_,ylabel_,plotlabel_]:=ListLinePlot[Transpose[{Table[yr,{yr,startyr,endyr-1}],Accumulate[data[[;;endyr-startyr]]]}],Frame->{True,True,False,False},FrameLabel->{"Year",ylabel},PlotLabel->plotlabel,PlotRange->{Automatic,{0,All}},LabelStyle->Black,PlotStyle->Black]


MultiSeriesCumulativeTimePlotBlack[dataseries_,ylabel_,plotlabel_,legend_]:=ListLinePlot[Table[Transpose[{Table[yr,{yr,startyr,endyr-1}],Accumulate[data[[;;endyr-startyr]]]}],{data,dataseries}],Frame->{True,True,False,False},FrameLabel->{"Year",ylabel},PlotLabel->plotlabel,PlotRange->{Automatic,{0,All}},LabelStyle->Black,PlotLegends->legend,PlotStyle->Table[{Black,Dashing[r/300]},{r,Length[dataseries]}]]


MultiSeriesCumulativeTimePlotBlack[dataseries_,ylabel_,plotlabel_,legend_,range_]:=ListLinePlot[Table[Transpose[{Table[yr,{yr,startyr,endyr-1}],Accumulate[data[[;;endyr-startyr]]]}],{data,dataseries}],Frame->{True,True,False,False},FrameLabel->{"Year",ylabel},PlotLabel->plotlabel,PlotRange->{Automatic,range},LabelStyle->Black,PlotLegends->legend,PlotStyle->Table[{Black,Dashing[r/300]},{r,Length[dataseries]}]]


ContourPlotBlack[dataseries_,xlabel_,ylabel_,plotlabel_,contourlabels_:Automatic,plotlegends_:Automatic,frameticks_:Automatic]:=ListContourPlot[dataseries,Frame->{True,True,False,False},FrameLabel->{xlabel,ylabel},FrameStyle->Black,LabelStyle->Black,PlotLabel->plotlabel,ColorFunction->GrayLevel,PlotLegends->plotlegends,ContourLabels->contourlabels,FrameTicks->frameticks]


ContourPlotBlackFramed[dataseries_,xlabel_,ylabel_,plotlabel_,contourlabels_:Automatic,plotlegends_:Automatic,frameticks_:Automatic]:=ContourPlotBlack[dataseries,xlabel,ylabel,plotlabel,(Text[Framed[#3],{#1,#2},Background->White]&),plotlegends,frameticks]
